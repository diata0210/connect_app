rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write access to authenticated users
    // For production, you should define more granular rules.
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // New rule for musicSync collection
    match /musicSync/{chatId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                    (exists(/databases/$(database)/documents/chats/$(chatId)) &&
                    (get(/databases/$(database)/documents/chats/$(chatId)).data.user1 == request.auth.uid ||
                    get(/databases/$(database)/documents/chats/$(chatId)).data.user2 == request.auth.uid));
    }

    // Example of more specific rules (you can adapt these later)
    // match /users/{userId} {
    //   allow read: if request.auth != null;
    //   allow write: if request.auth.uid == userId;
    // }
    // match /chats/{chatId} {
    //   allow read, write: if request.auth.uid == resource.data.user1 || request.auth.uid == resource.data.user2;
    // }
    // match /messages/{messageId} {
    //   allow read, write: if request.auth != null; // Further restrict based on chatId if needed
    // }
    // match /gameSessions/{sessionId} {
    //   allow read, write: if request.auth.uid == resource.data.player1 || request.auth.uid == resource.data.player2;
    // }
    // match /gameMessages/{messageId} {
    //  allow read, write: if request.auth != null; // Further restrict based on gameSessionId if needed
    // }
    // match /gameInvitations/{invitationId} {
    //   allow read, write: if request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.recipientId;
    // }
  }
}