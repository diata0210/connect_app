import React, { useState, useEffect } from 'react';
import { addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { db } from '../../firebase';

interface RandomQuestionGameProps {
  chatId: string;
  currentUserId: string;
  onClose: () => void;
}

// Danh s√°ch c√¢u h·ªèi ph√° bƒÉng theo nhi·ªÅu ch·ªß ƒë·ªÅ
const QUESTION_CATEGORIES = {
  fun: [
    "N·∫øu b·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt s·ª©c m·∫°nh si√™u nhi√™n, b·∫°n s·∫Ω ch·ªçn g√¨?",
    "B·ªô phim m√† b·∫°n c√≥ th·ªÉ xem ƒëi xem l·∫°i nhi·ªÅu l·∫ßn nh·∫•t l√† g√¨?",
    "N·∫øu b·∫°n c√≥ m·ªôt ng√†y ƒë·ªÉ ƒëi ƒë·∫øn b·∫•t k·ª≥ ƒë√¢u tr√™n th·∫ø gi·ªõi, b·∫°n s·∫Ω ƒëi ƒë√¢u?",
    "B·∫°n th√≠ch m√≥n ƒÉn g√¨ nh·∫•t v√† t·∫°i sao?",
    "N·∫øu b·∫°n ph·∫£i nghe m·ªôt b√†i h√°t trong su·ªët qu√£ng ƒë·ªùi c√≤n l·∫°i, ƒë√≥ s·∫Ω l√† b√†i g√¨?"
  ],
  thoughtful: [
    "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y bi·∫øt ∆°n nh·∫•t trong cu·ªôc s·ªëng hi·ªán t·∫°i?",
    "B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c b√†i h·ªçc qu√Ω gi√° nh·∫•t n√†o trong nƒÉm qua?",
    "N·∫øu c√≥ th·ªÉ n√≥i chuy·ªán v·ªõi b·∫£n th√¢n l√∫c nh·ªè, b·∫°n s·∫Ω n√≥i g√¨?",
    "ƒêi·ªÅu g√¨ lu√¥n khi·∫øn b·∫°n c·∫£m th·∫•y b√¨nh y√™n b·∫•t k·ªÉ m·ªçi chuy·ªán?",
    "B·∫°n nghƒ© th√†nh c√¥ng th·ª±c s·ª± nghƒ©a l√† g√¨?"
  ],
  language: [
    "T·ª´ y√™u th√≠ch c·ªßa b·∫°n trong ti·∫øng Anh l√† g√¨ v√† t·∫°i sao?",
    "B·∫°n th√≠ch h·ªçc ng√¥n ng·ªØ theo c√°ch n√†o nh·∫•t?",
    "C√≥ ph∆∞∆°ng ng·ªØ ho·∫∑c ti·∫øng ƒë·ªãa ph∆∞∆°ng n√†o m√† b·∫°n th·∫•y th√∫ v·ªã kh√¥ng?",
    "B·∫°n nghƒ© ng√¥n ng·ªØ n√†o kh√≥ h·ªçc nh·∫•t?",
    "M·ªôt c√¢u n√≥i hay c√¢u t·ª•c ng·ªØ m√† b·∫°n th√≠ch nh·∫•t l√† g√¨?"
  ],
  preferences: [
    "B·∫°n th√≠ch m√πa n√†o nh·∫•t trong nƒÉm?",
    "N·∫øu ph·∫£i ch·ªçn gi·ªØa n√∫i v√† bi·ªÉn, b·∫°n s·∫Ω ch·ªçn g√¨?",
    "Bu·ªïi s√°ng hay bu·ªïi t·ªëi - khi n√†o b·∫°n c·∫£m th·∫•y nƒÉng su·∫•t nh·∫•t?",
    "Th·ªÉ lo·∫°i s√°ch y√™u th√≠ch c·ªßa b·∫°n l√† g√¨?",
    "Th√∫ c∆∞ng l√Ω t∆∞·ªüng c·ªßa b·∫°n l√† g√¨?"
  ],
  hypothetical: [
    "N·∫øu b·∫°n c√≥ m√°y th·ªùi gian, b·∫°n s·∫Ω ƒëi ƒë·∫øn th·ªùi ƒëi·ªÉm n√†o trong l·ªãch s·ª≠?",
    "N·∫øu b·∫°n c√≥ th·ªÉ tr·ªü th√†nh chuy√™n gia ngay l·∫≠p t·ª©c trong m·ªôt lƒ©nh v·ª±c, ƒë√≥ s·∫Ω l√† g√¨?",
    "N·∫øu b·∫°n c√≥ th·ªÉ s·ªëng ·ªü b·∫•t k·ª≥ ƒë·∫•t n∆∞·ªõc n√†o kh√°c, b·∫°n s·∫Ω ch·ªçn ƒë√¢u?",
    "N·∫øu cu·ªôc s·ªëng c·ªßa b·∫°n l√† m·ªôt b·ªô phim, ti√™u ƒë·ªÅ c·ªßa n√≥ s·∫Ω l√† g√¨?",
    "N·∫øu b·∫°n c√≥ th·ªÉ d√†nh m·ªôt ng√†y v·ªõi b·∫•t k·ª≥ ng∆∞·ªùi n·ªïi ti·∫øng n√†o (s·ªëng hay ƒë√£ m·∫•t), b·∫°n s·∫Ω ch·ªçn ai?"
  ]
};

// T·∫•t c·∫£ c√°c ch·ªß ƒë·ªÅ
const ALL_CATEGORIES = Object.keys(QUESTION_CATEGORIES) as Array<keyof typeof QUESTION_CATEGORIES>;

const RandomQuestionGame: React.FC<RandomQuestionGameProps> = ({
  chatId,
  currentUserId,
  onClose
}) => {
  const [selectedCategory, setSelectedCategory] = useState<keyof typeof QUESTION_CATEGORIES | 'all'>('all');
  const [currentQuestion, setCurrentQuestion] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [sentQuestions, setSentQuestions] = useState<string[]>([]);

  // H√†m l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n
  const getRandomQuestion = () => {
    setIsGenerating(true);
    
    let availableQuestions: string[] = [];
    
    if (selectedCategory === 'all') {
      // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi t·ª´ m·ªçi ch·ªß ƒë·ªÅ
      ALL_CATEGORIES.forEach(category => {
        availableQuestions = [...availableQuestions, ...QUESTION_CATEGORIES[category]];
      });
    } else {
      // L·∫•y c√¢u h·ªèi t·ª´ ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ch·ªçn
      availableQuestions = QUESTION_CATEGORIES[selectedCategory];
    }
    
    // L·ªçc ra nh·ªØng c√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c g·ª≠i
    const unusedQuestions = availableQuestions.filter(q => !sentQuestions.includes(q));
    
    // N·∫øu ƒë√£ h·∫øt c√¢u h·ªèi, s·ª≠ d·ª•ng l·∫°i t·∫•t c·∫£
    const questionsToUse = unusedQuestions.length > 0 ? unusedQuestions : availableQuestions;
    
    // Ch·ªçn c√¢u h·ªèi ng·∫´u nhi√™n
    const randomIndex = Math.floor(Math.random() * questionsToUse.length);
    const question = questionsToUse[randomIndex];
    
    setCurrentQuestion(question);
    setIsGenerating(false);
  };

  useEffect(() => {
    // T·ª± ƒë·ªông t·∫°o c√¢u h·ªèi khi component ƒë∆∞·ª£c t·∫£i
    getRandomQuestion();
  }, [selectedCategory]); // T·∫°o l·∫°i khi thay ƒë·ªïi ch·ªß ƒë·ªÅ

  // H√†m g·ª≠i c√¢u h·ªèi v√†o cu·ªôc tr√≤ chuy·ªán
  const sendQuestion = async () => {
    if (!currentQuestion) return;

    try {
      // Th√™m c√¢u h·ªèi v√†o tin nh·∫Øn chat
      await addDoc(collection(db, 'messages'), {
        chatId,
        senderId: currentUserId,
        text: `üé≤ ${currentQuestion}`,
        timestamp: serverTimestamp()
      });

      // C·∫≠p nh·∫≠t danh s√°ch c√¢u h·ªèi ƒë√£ g·ª≠i
      setSentQuestions(prev => [...prev, currentQuestion]);
      
      // T·ª± ƒë·ªông t·∫°o c√¢u h·ªèi m·ªõi
      getRandomQuestion();
      
      // ƒê√≥ng modal n·∫øu c·∫ßn
      onClose();
    } catch (error) {
      console.error('Error sending question:', error);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-800">C√¢u ƒê·ªë Ng·∫´u Nhi√™n</h2>
            <button 
              onClick={onClose} 
              className="text-gray-500 hover:text-gray-700"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <p className="text-gray-600 mb-4">
            D√πng c√¢u h·ªèi ng·∫´u nhi√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán th√∫ v·ªã!
          </p>
          
          {/* Ch·ªçn ch·ªß ƒë·ªÅ */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">Ch·ªß ƒë·ªÅ:</label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value as any)}
              className="w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="all">T·∫•t c·∫£ ch·ªß ƒë·ªÅ</option>
              <option value="fun">Vui nh·ªôn</option>
              <option value="thoughtful">Suy ng·∫´m</option>
              <option value="language">Ng√¥n ng·ªØ</option>
              <option value="preferences">S·ªü th√≠ch</option>
              <option value="hypothetical">Gi·∫£ ƒë·ªãnh</option>
            </select>
          </div>
          
          {/* Hi·ªÉn th·ªã c√¢u h·ªèi */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            {isGenerating ? (
              <div className="animate-pulse flex space-x-4">
                <div className="flex-1 space-y-4 py-1">
                  <div className="h-4 bg-blue-200 rounded w-3/4"></div>
                  <div className="h-4 bg-blue-200 rounded"></div>
                </div>
              </div>
            ) : (
              <p className="text-lg text-blue-800">{currentQuestion}</p>
            )}
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={getRandomQuestion}
              className="flex-1 py-2 px-4 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded transition-colors"
              disabled={isGenerating}
            >
              C√¢u h·ªèi kh√°c
            </button>
            <button
              onClick={sendQuestion}
              className="flex-1 py-2 px-4 bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
              disabled={isGenerating || !currentQuestion}
            >
              G·ª≠i c√¢u h·ªèi
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RandomQuestionGame;
